<h1>Checks <small id="last_update"></small></h1>
<% if (info.length) { %>
<div class="alert alert-success"><%= info %></div>
<% } %>
<div style="text-align:right">
  <a class="btn btn-primary" href="<%= route %>/check">Create check</a>
</div>
<table class="table" id="checks">
  <thead>
    <tr><th>Name</th><th>Status</th><th>Uptime</th><th>Downtime</th><th>Avg. Response time</th></tr>
  </thead>
  <tbody></tbody>
  <tfoot>
    <tr><td colspan="2"></td><td>Average of all checks<br/>in the last 24h</td><td>Total of all checks<br />in the last 24h</td><td>Average of all checks<br/>in the last 24h</td></tr>
  </tfoot>
</table>
<script src="<%= route %>/javascripts/jquery.timeago.js"></script>
<script src="<%= route %>/javascripts/jquery.tablesorter.min.js"></script>
<script src="<%= route %>/javascripts/ejs.min.js"></script>
<script id="check_template" type="text/template">
<tr>
  <td data-sort="{{= check.name }}">
    <a href="{{=  route + '/check/' + check._id }}">{{= check.name }}</a>
    <a href="{{= check.url }}"><img src="{{= route }}/images/external-link-ltr-icon.png"></a>
  </td>
  <td data-sort="{{= check.isUp ? check.uptime : -check.downtime }}"><span class="label {{= (check.isUp ? 'label-success' : 'label-important') }}">{{= (check.isUp ? 'Up' : 'Down') }}</span> <span class="{{= check.isUp ? 'green' : 'red' }}"> for {{= $.timeago.inWords(check.isUp ? check.uptime : check.downtime) }}</span>
  <td data-sort="{{= check.qos ? check.qos.ups / check.qos.count : 100 }}">{{= check.qos ? ((check.qos.ups / check.qos.count) * 100).toFixed(3) : '' }}%</td>
  <td data-sort="{{= check.qos ? check.qos.downtime : 0 }}">{{= check.qos ? (check.qos.downtime / 1000).toFixed() : '' }}s</td>
  <td data-sort="{{= check.qos ? check.qos.time / check.qos.count : 0 }}">{{= check.qos ? Math.round(check.qos.time / check.qos.count) : '' }}ms</td>
</tr>
</script>
<script>
jQuery(document).ready(function($) {
  $('.navbar-inner li').eq(1).addClass('active');
  $('#checks').tablesorter({
    textExtraction: function(node) {
      return $(node).data('sort');
    },
    sortList: [[1,0]]
  });
  $.timeago.settings.strings.suffixAgo = null;
  var check_template = document.getElementById('check_template').innerHTML;
  var ejs = require('ejs');
  ejs.open = '{{';
  ejs.close = '}}';
  var updateChecks = function() {
    $.getJSON('/api/check', function(checks) {
      var lines = [];
      $.each(checks, function(key, check) {
        lines.push(ejs.render(check_template, { check: check, route: '<%= route %>' }));
      });
      $('#checks tbody').html(lines.join(''));
      $('#checks').trigger('update');
      $('#last_update').text('Last updated on ' + new Date().toLocaleString());
    });
  }
  updateChecks();
  socket.on('CheckEvent', updateChecks);
});
</script>
