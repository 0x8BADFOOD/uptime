<div class="tab-pane" id="stats">
  <div class="btn-toolbar">
    <div class="btn-group pull-left">
      <a class="old btn" href="#">&lt;</a>
      <a class="recent btn" href="#">&gt;</a>
    </div>
    <div class="btn-group pull-right" data-toggle="buttons-radio" id="chartPeriod">
      <a class="btn" data-period="1h" href="#">1h</a>
      <a class="btn" data-period="6h" href="#">6h</a>
      <a class="btn" data-period="1d" href="#">1d</a>
      <a class="btn active" data-period="7d" href="#">7d</a>
      <a class="btn" data-period="MTD" href="#">MTD</a>
      <a class="btn" data-period="1m" href="#">1m</a>
      <a class="btn" data-period="3m" href="#">3m</a>
      <a class="btn" data-period="6m" href="#">6m</a>
      <a class="btn" data-period="YTD" href="#">YTD</a>
      <a class="btn" data-period="1y" href="#">1y</a>
      <a class="btn" data-period="3y" href="#">3y</a>
    </div>
  </div>
  <div id="chart" style="width:920px;height: 400px"></div>
  <hr/>
  <table class="table">
    <thead>
      <tr><th>Date</th><th>Uptime</th><th>Downtime</th><th>Avg. Response time</th></tr>
    </thead>
    <tbody></tbody>
  </table>
  <div class="btn-toolbar">
    <div class="btn-group pull-left">
      <a class="old btn" href="#">&lt;</a>
      <a class="recent btn" href="#">&gt;</a>
    </div>
  </div>
  <div style="clear:left"></div>
</div>
<script id="stat_template" type="text/template">
<tr class="{{= (stat.uptime == 100) ? 'green' : 'red' }}">
  <td>{{= new Date(stat.timestamp).toLocaleString() }}</td>
  <td>{{= stat.uptime }}%</td>
  <td>{{= stat.downtime }}s</td>
  <td>{{= stat.responseTime }}ms</td>
</tr>
</script>
<script>
var chartPeriod;
var chart;
var drawChart = function(uptime, responseTime, period) {
  var uptimeBoundaries = getBoundaries(uptime);
  chart = new Highcharts.Chart({
    chart: {
      renderTo: 'chart',
      zoomType: 'x',
      alignTicks: false
    },
    title: null,
    legend: { enabled: false },
    xAxis: { type: 'datetime' },
    yAxis: [{
       title: { text: 'Uptime', style: { color: '#4572A7' }},
       labels: { style: { color: '#4572A7' }},
       min: uptimeBoundaries.min < 10 ? uptimeBoundaries.min : uptimeBoundaries < 90 ? uptimeBoundaries.min - 10 : 90,
       max: 100
    }, { 
      title: { text: 'Response Time', style: { color: '#89A54E' }},
      labels: { style: { color: '#89A54E' }},
      opposite: true,
      gridLineWidth: 0
    }],
    series: [
      { name: "Uptime", data: uptime, type: 'area', color: '#4572A7' }, 
      { name: "Response Time", data: responseTime, yAxis: 1, type: 'spline', color: '#89A54E' }
    ],
    plotOptions: {
      area: {
        fillColor: {
          linearGradient: [0, 0, 0, 300],
          stops: [
            [0, 'rgba(80, 144, 197, 0.8)'],
            [1, 'rgba(96,156,210,0.4)']
          ]
        }
      }
    },
    tooltip: {
      formatter: function() {
        var dateFormat;
        if ('1h' == period || '6h' == period) {
          dateFormat = '%e. %b %Y, %H:%M';
        }
        if ('1d' == period || '7d' == period) {
          dateFormat = '%e. %b %Y, %H:00';
        };
        if ('MTD' == period || '1m' == period || '3m' == period) {
          dateFormat = '%e. %b %Y';
        };
        if ('6m' == period || 'YTD' == period || '1y' == period || 'max' == period) {
          dateFormat = '%b %Y';
        }
        return Highcharts.dateFormat(dateFormat, this.x) +'<br/>' 
           + (this.series.name == 'Uptime' ? 'Uptime: ' : 'Response Time: ')
           + this.y
           + (this.series.name == 'Uptime' ? '%' : 'ms');
      }
    }
  });
}

var getBoundaries = function(series) {
  var min = null;
  var max = null;
  series.forEach(function(element) {
    if (min === null || element[1] < min) {
      min = element[1];
    }
    if (max === null || element[1] < max) {
      max = element[1];
    }
  });
  return { min: min, max: max };
}

$(document).ready(function() {
  var timezoneOffset = new Date().getTimezoneOffset() * 60 * 1000;
  var stat_template = document.getElementById('stat_template').innerHTML;
  var updateStats = function() {
    $.getJSON('<%= url %>' + chartPeriod + '/' + page.stat, function(stats) {
      var lines = [];
      var uptime = [];
      var responseTime = [];
      $.each(stats, function(key, stat) {
        lines.push(ejs.render(stat_template, { stat: stat }));
        uptime.push([stat.timestamp - timezoneOffset, stat.uptime]);
        responseTime.push([stat.timestamp - timezoneOffset, stat.responseTime]);
      });
      $('#stats tbody').html(lines.join(''));
      drawChart(uptime, responseTime, chartPeriod);
    });
  }
  $('#chartPeriod a').click(function() {
    chartPeriod = $(this).data('period');
    page.stat = 1;
    $('#stats .recent').hide();
    updateStats();
  });
  page.stat = 1;
  chartPeriod = '7d';
  handlePagination('stat', '#stats', updateStats);
});
</script>
